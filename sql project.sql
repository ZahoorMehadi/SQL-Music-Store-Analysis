create database msuic_database;
use msuic_database;
select* from artist;
select * from employee;
select * from invoice;
select * from invoice_line;
select * from album2;
select * from customer;
select * from genre;
select * from media_type;
select * from playlist;
select * from playlist_track;
select * from track;


-- WHO IS THE MOST SENIOR EMPLOYEE BASED OF JOB TITLE?
select * from employee order by levels desc limit 1;

-- WHICH COUNTRY HAS THE MOST INVOICES?
SELECT count(*) as c , billing_country FROM INVOICE group by billing_country ORDER BY c DESC;

-- WHAT ARE TOP 3 VALUE OF TOTAL INVOICES?
SELECT * FROM INVOICE ORDER BY TOTAL DESC LIMIT 3;

-- WHICH CITY HAS THE BEST CUSTOMER? WE WOULD LIKE TO THROUGH A PROMOTIONAL MUSIC FESTIVAL IN THE CITY WE MADE THE MOST MONEY .
-- WRITE A QUERY THAT RETURNS THE ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTAL RETURN BOTH CITY NAME AND SUM OF ALL INVOICE .

SELECT sum(TOTAL) AS TOTAL_INVOICE , BILLING_CITY FROM INVOICE group by BILLING_CITY ORDER BY TOTAL_INVOICE DESC;

-- WHO IS THE BEST CUSTOMER ? THE CUSTOMER WHO SPENT THE MOST MONEY WILL  BE DECLARED THE BEST CUSTOMER .
-- WRITE A QUERY THE PERSDON WHOS PENT THE MOST MONEY.

SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, SUM(INVOICE.TOTAL) AS TOTAL FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID 
GROUP BY CUSTOMER.CUSTOMER_ID ORDER BY TOTAL DESC LIMIT 1;

-- WRITE A QUERY TO RETURN A EMAIL, FIRSTNAME, LASTNAME, & GENRE OF ALL ROCK MUSIC LISTENERS . RETUEN YOUR LIST ORDER 
-- ALPHABETICALLY BY EMAIL STARTING WITH A.

SELECT DISTINCT EMAIL,FIRST_NAME, LAST_NAME FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
WHERE TRACK_ID IN(
    SELECT TRACK_ID FROM TRACK
    JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID
    WHERE GENRE.NAME = 'ROCK'
)
ORDER BY EMAIL;

-- LETS INVITE THE ARTIST WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATASET.
-- WRITE A QUERY THAT RETURN THE ARTIST NAME AND TOTAL TRACK COUNT OF THE TOP 10 ROCK BANDS

SELECT ARTIST.ARTIST_ID, ARTIST.NAME, COUNT(ARTIST.ARTIST_ID) AS NUMBER_OF_SONGS 
FROM TRACK
JOIN ALBUM2 ON ALBUM2.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM2.ARTIST_ID
JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
WHERE GENRE.NAME LIKE 'ROCK'
GROUP BY ARTIST.ARTIST_ID
ORDER BY NUMBER_OF_SONGS DESC;

-- RETURN ALL THE TRACK NAME THAT HAVE THE SONG LENGTH GRAETER THAN THE AVG SONG LENGTH .
-- RETURN THE NAME AND MILLISECOND FOR EACH TRACK . ORDER BY THE SONGS LENGTH WITH LONGEST SONGS LISTED THE FIRST.

SELECT NAME, MILLISECONDS FROM TRACK 
WHERE MILLISECONDS > (
       SELECT AVG(MILLISECONDS) AS TRACK_LENGTH
       FROM TRACK)
ORDER BY MILLISECONDS DESC;

-- FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON ARTIST? WRITE A QUERY TO RETURN EACH NAME, ARTIST NMAE, TOTAL SPENT. 

WITH BEST_SELLING_ARTIST AS (
      SELECT ARTIST.ARTIST_ID AS ARTIST_ID, ARTIST.NAME AS ARTIST_NAME,
      SUM(INVOICE_LINE.UNIT_PRICE*INVOICE_LINE.QUANTITY) AS TOTAL_SALES
      FROM INVOICE_LINE
      JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
      JOIN ALBUM2 ON ALBUM2.ALBUM_ID = TRACK.ALBUM_ID
      JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM2.ARTIST_ID
      GROUP BY 1
      ORDER BY 3 DESC
      LIMIT 1
)
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, BSA.ARTIST_NAME,
SUM(IL.UNIT_PRICE*IL.QUANTITY) AS AMOUNT_SPENT
FROM INVOICE
JOIN CUSTOMER C ON C.CUSTOMER_ID = INVOICE.CUSTOMER_ID
JOIN INVOICE_LINE IL ON IL.INVOICE_ID = INVOICE.INVOICE_ID
JOIN TRACK ON TRACK.TRACK_ID = IL.TRACK_ID
JOIN ALBUM2 ON ALBUM2.ALBUM_ID = TRACK.ALBUM_ID
JOIN BEST_SELLING_ARTIST BSA ON BSA.ARTIST_ID = ALBUM2.ARTIST_ID
GROUP BY 1, 2, 3
ORDER BY 5 DESC;


-- WE WANT TO FIND OUT THE MOST POPULAR MUSIC GENRE FOR EACH COUNTRY . WE DETERMINE MOST POPULAR GENRE AS GENRE WITH THE HIGHEST AMOUNT OF PURCHASES
-- WRITE A QUERY THAT RETURN EACH COUNTRY ALONG WITH THE TOP GENRE. FOR COUNTRIES WHERE THE MAX NUMBER OF PURCHASES IS SHARED ALL GENRE.

WITH POPULAR_GENRE AS (
      SELECT COUNT(INVOICE_LINE.QUANTITY) AS PURCHASES, CUSTOMER.COUNTRY, GENRE.NAME, GENRE.GENRE_ID,
      ROW_NUMBER() OVER (PARTITION BY CUSTOMER.COUNTRY ORDER BY COUNT(INVOICE_LINE.QUANTITY) DESC) AS ROWNO
      FROM INVOICE_LINE
      JOIN INVOICE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
      JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
      JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
      JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
      GROUP BY 2, 3, 4
      ORDER BY 2 ASC, 1 DESC
)
SELECT * FROM POPULAR_GENRE WHERE ROWNO<=1;

-- WRITE A QUERY THAT DETERMINES THE THAT CUSTOMER HAS SPENT THE MOST ON MUSIC FOR WHICH COUNTRY. WRITE A QUERY THAT RETURNS COUNTRY 
-- ALONG WITH TOP CUSTTOMER AND HOW MUCH THEY SPENT. FOR COUNTRY WHERE THE TOP AMOUNT IS SPENT SHARED, PROVIDE ALL CUSTOMER WHO HAS SPENT THIS AMOUNT.  

WITH RECURSIVE
    CUSTOMER_WITH_COUNTRY AS(
    SELECT CUSTOMER.CUSTOMER_ID, FIRST_NAME, LAST_NAME, BILLING_COUNTRY, SUM(TOTAL) AS TOTAL_SPENDING
    FROM INVOICE
    JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.INVOICE_ID
    GROUP BY 1, 2, 3, 4
    ORDER BY 1, 5 DESC),
    COUNTRY_MAX_SPENDING AS(
    SELECT BILLING_COUNTRY, MAX(TOTAL_SPENDING) AS MAX_SPENDING
    FROM CUSTOMER_WITH_COUNTRY
    GROUP BY BILLING_COUNTRY)
    
SELECT CC.BILLING_COUNTRY, CC.TOTAL_SPENDING, CC.FIRST_NAME, CC.LAST_NAME, CC.CUSTOMER_ID
FROM CUSTOMER_WITH_COUNTRY CC
JOIN COUNTRY_MAX_SPENDING MS ON MS.BILLING_COUNTRY = CC.BILLING_COUNTRY
WHERE CC.TOTAL_SPENDING = MS.MAX_SPENDING
GROUP BY 1
ORDER BY 1;

